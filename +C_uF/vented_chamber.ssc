component vented_chamber
    nodes
        I = C_uF.C_uF;
    end
    inputs
        f = {0,'Hz'};
        revIn = {0, '1'};
    end
    outputs
        out = {2,'1'};
    end
    annotations
        revIn : Side = right;
        I : Side = bottom;
        f : Side = top;
        out : Side = bottom;
    end
    variables
        p = {0,'Pa'};
        q = {0,'mm^3/s'};
        h_liquid = {0,'mm'};
        p_cent = {0,'Pa'};
        f_dot = {0,'Hz/s'};
        p_Euler = {0,'Pa'};
        V_liquid = {0,'mm^3'};
        fill = {0,'1'};
    end
    parameters
        G = {0,'1'}; %Azimuthal position of the outlet
        init_fill = {0,'1'}; %Initial fill
        d = {0,'mm'}; %Depth
        anglength = {0,'1'}; %Angle of aperture
        InRad = {10,'mm'}; %Inner Radius
        OutRad = {10,'mm'}; %Outer Radius
    end
    parameters (Access = private)
        Area = {0,'mm^2'};
        V_total = {0,'mm^3'};
        w = {0,'mm'};
        p0 = {101325,'Pa'};
        Euler_fill = {0.1,'1'};
        EP = {100,'1/s'};
    end
    function setup
        across(p,I.p,[]);
        through(q,I.q,[]);
        w = 2*pi*InRad*anglength/360;
        Area = anglength*(pi/360)*(OutRad^2-InRad^2)
        V_total = Area*d;
        if init_fill >=1
            fill = 1;
            V_liquid = V_total;
        elseif init_fill > 0
            fill = init_fill;
            V_liquid = init_fill*V_total;
        else
            fill = 0;
            V_liquid = 0;
        end
    end
    equations
        fill == V_liquid/V_total;
        f.der == f_dot;
        h_liquid == sqrt(OutRad^2-V_liquid*360/d/anglength/pi);
        p_cent == 0.5*I.density*(OutRad^2-(OutRad-h_liquid)^2)*(2*pi*f)^2 + 0.5*I.density_gas*((InRad+h_liquid)^2-InRad^2)*(2*pi*f)^2;
        if V_liquid > 0
            if f_dot > 0
                if fill > Euler_fill
                    p_Euler.der == EP*(-(G-1)*0.5*(I.density*w*2*pi*InRad)*f_dot-p_Euler);
                else
                    p_Euler.der == EP*(-(G-1)*0.5*(I.density*w*2*pi*InRad)*f_dot*(fill/Euler_fill)-p_Euler);
                end
            else
                if fill > Euler_fill
                    p_Euler.der == EP*(-(G+1)*0.5*(I.density*w*2*pi*InRad)*f_dot-p_Euler);
                else
                    p_Euler.der == EP*(-(G+1)*0.5*(I.density*w*2*pi*InRad)*f_dot*(fill/Euler_fill)-p_Euler);
                end
            end
        else
            p_Euler.der == -EP*p_Euler;
        end

        if (fill>0) && (revIn<0) && (q<0)
            % emptying
            V_liquid.der == -abs(q);
            out == 2;
        elseif (fill<=0) && ((q<0) || ((q>0) && (revIn<0)))
            % continuous empty
            V_liquid.der == 0;
            out == -1;
        elseif (fill<1) && (revIn>1) && (q>0)
            % filling
	          V_liquid.der == abs(q);
            out == -1;
        else
            % continuous filled
            V_liquid.der == 0;
            out == -1;
        end

        p + p_cent + p_Euler == 0;
    end
end
